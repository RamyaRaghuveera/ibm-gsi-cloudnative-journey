(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{"013z":function(e,t,a){"use strict";var n=a("q1tI"),o=a.n(n),b=a("NmYn"),r=a.n(b),l=a("Wbzz"),c=a("Xrax"),i=a("k4MR"),s=a("TSYQ"),u=a.n(s),m=a("QH2O"),d=a.n(m),p=a("qKvR"),j=function(e){var t,a=e.title,n=e.theme,o=e.tabs,b=void 0===o?[]:o;return Object(p.b)("div",{className:u()(d.a.pageHeader,(t={},t[d.a.withTabs]=b.length,t[d.a.darkMode]="dark"===n,t))},Object(p.b)("div",{className:"bx--grid"},Object(p.b)("div",{className:"bx--row"},Object(p.b)("div",{className:"bx--col-lg-12"},Object(p.b)("h1",{id:"page-title",className:d.a.text},a)))))},g=a("BAC9"),O=function(e){var t=e.relativePagePath,a=e.repository,n=Object(l.useStaticQuery)("1364590287").site.siteMetadata.repository,o=a||n,b=o.baseUrl,r=o.subDirectory,c=b+"/edit/"+o.branch+r+"/src/pages"+t;return b?Object(p.b)("div",{className:"bx--row "+g.row},Object(p.b)("div",{className:"bx--col"},Object(p.b)("a",{className:g.link,href:c},"Edit this page on GitHub"))):null},h=a("FCXl"),x=a("9Hrx"),N=a("I8xM"),w=function(e){function t(){return e.apply(this,arguments)||this}return Object(x.a)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,n=e.slug,o=n.split("/").filter(Boolean).slice(-1)[0],b=a.map((function(e){var t,a=r()(e,{lower:!0,strict:!0}),b=a===o,c=new RegExp(o+"/?(#.*)?$"),i=n.replace(c,a);return Object(p.b)("li",{key:e,className:u()((t={},t[N.selectedItem]=b,t),N.listItem)},Object(p.b)(l.Link,{className:N.link,to:""+i},e))}));return Object(p.b)("div",{className:N.tabsContainer},Object(p.b)("div",{className:"bx--grid"},Object(p.b)("div",{className:"bx--row"},Object(p.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(p.b)("nav",{"aria-label":t},Object(p.b)("ul",{className:N.list},b))))))},t}(o.a.Component),T=a("MjG9"),f=a("CzIb");t.a=function(e){var t=e.pageContext,a=e.children,n=e.location,o=e.Title,b=t.frontmatter,s=void 0===b?{}:b,u=t.relativePagePath,m=t.titleType,d=s.tabs,g=s.title,x=s.theme,N=s.description,v=s.keywords,k=Object(f.a)().interiorTheme,P=Object(l.useStaticQuery)("2456312558").site.pathPrefix,y=P?n.pathname.replace(P,""):n.pathname,C=d?y.split("/").filter(Boolean).slice(-1)[0]||r()(d[0],{lower:!0}):"",E=x||k;return Object(p.b)(i.a,{tabs:d,homepage:!1,theme:E,pageTitle:g,pageDescription:N,pageKeywords:v,titleType:m},Object(p.b)(j,{title:o?Object(p.b)(o,null):g,label:"label",tabs:d,theme:E}),d&&Object(p.b)(w,{title:g,slug:y,tabs:d,currentTab:C}),Object(p.b)(T.a,{padded:!0},a,Object(p.b)(O,{relativePagePath:u})),Object(p.b)(h.a,{pageContext:t,location:n,slug:y,tabs:d,currentTab:C}),Object(p.b)(c.a,null))}},BAC9:function(e,t,a){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,t,a){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},Nx2K:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a("k1TG"),o=a("8o2o"),b=(a("q1tI"),a("7ljp")),r=a("013z"),l=(a("qKvR"),{}),c={_frontmatter:l},i=r.a;function s(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(b.b)(i,Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",null,"Problem"),Object(b.b)("p",null,"Your commander has a simple data process that is run periodically to check status. They would like to stop doing this manually in order to save time, so you have been asked to implement a cron job in the Kubernetes cluster to run this process. "),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Create a cron job called xwing-cronjob using the ",Object(b.b)("inlineCode",{parentName:"li"},"ibmcase/xwing-status:1.0")," image. "),Object(b.b)("li",{parentName:"ul"},"Have the job run every second minute with the following cron expression: ",Object(b.b)("inlineCode",{parentName:"li"},"*/2 * * * *"),"."),Object(b.b)("li",{parentName:"ul"},"Pass the argument ",Object(b.b)("inlineCode",{parentName:"li"},"/usr/sbin/xwing-status.sh")," to the container.")),Object(b.b)("h2",null,"Solution"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"Create the cronjob executing the below command and use the below yaml defination."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0})," oc apply -f Downloads/FoundationHandsOn/cronjob.yaml -n {DEV_NAMESPACE}\n")),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'  apiVersion: batch/v1beta1\n  kind: CronJob\n  metadata:\n  name: xwing-cronjob\n  spec:\n  schedule: "*/2 * * * *"\n  jobTemplate:\n     spec:\n        template:\n        spec:\n           containers:\n           - name: xwing-status\n              image: ibmcase/xwing-status:1.0\n              args:\n              - /usr/sbin/xwing-status.sh\n           restartPolicy: OnFailure\n'))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"To view th Cronjob."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0})," oc get cronjob xwing-cronjob -n -n {DEV_NAMESPACE}\n")))),Object(b.b)("h2",null,"Verification"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Run ",Object(b.b)("inlineCode",{parentName:"li"},"kubectl get cronjobs.batch")," and ",Object(b.b)("inlineCode",{parentName:"li"},"LAST-SCHEDULE")," to see last time it ran"),Object(b.b)("li",{parentName:"ul"},"From a bash shell, run the following to see the logs for all jobs:")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'jobs=( $(kubectl get jobs --no-headers -o custom-columns=":metadata.name") )\necho -e "Job \\t\\t\\t\\t Pod \\t\\t\\t\\t\\tLog"\nfor job in "${jobs[@]}"\ndo\n   pod=$(kubectl get pods -l job-name=$job --no-headers -o custom-columns=":metadata.name")\n   echo -en "$job \\t $pod \\t"\n   kubectl logs $pod\ndone\n')))}s.isMDXComponent=!0},QH2O:function(e,t,a){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",darkMode:"PageHeader-module--dark-mode--hBrwL",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}}}]);
//# sourceMappingURL=component---src-pages-developer-foundation-activities-labs-lab-7-index-mdx-3d0d06e64dcf1c0c0cf5.js.map